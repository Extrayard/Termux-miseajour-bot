


#!/data/data/com.termux/files/usr/bin/bash

LOGFILE=~/install_log.txt
ACTIVITY_LOG=~/activity_log.txt

# Codes de couleur
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Pas de couleur

# Langue par d√©faut
LANGUAGE="fr"

# Fonction pour changer la langue
change_language() {
    echo "Choisissez votre langue :"
    echo "1. Fran√ßais"
    echo "2. English"
    read -p "S√©lectionnez une langue (1/2) : " lang_option
    if [ "$lang_option" == "2" ]; then
        LANGUAGE="en"
    else
        LANGUAGE="fr"
    fi
}

# Fonctions utilitaires
check_disk_space() {
    local required_space=2000000  # 2 Go en Ko
    local available_space=$(df /data/data/com.termux/files | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt "$required_space" ]; then
        echo -e "${RED}Erreur : Pas assez d'espace disque disponible. Veuillez lib√©rer de l'espace.${NC}"
        exit 1
    fi
}

# Fonction pour √©crire dans le journal d'activit√©
log_activity() {
    echo "$(date): $1" >> "$ACTIVITY_LOG"
}

# Fonction pour afficher le menu principal
display_main_menu() {
    echo -e "${YELLOW}============================================${NC}"
    echo -e "${GREEN}Assistant d'Installation de Paquets üéà${NC}"
    echo -e "${YELLOW}============================================${NC}"
    if [ "$LANGUAGE" == "fr" ]; then
        echo "1. Installer un paquet"
        echo "2. Mettre √† jour les paquets"
        echo "3. D√©sinstaller un paquet"
        echo "4. Rechercher un paquet"
        echo "5. Afficher les informations sur un paquet"
        echo "6. R√©installer un paquet"
        echo "7. Aide"
        echo "8. Sauvegarder la liste des paquets install√©s"
        echo "9. Mettre √† jour la liste des paquets"
        echo "10. Afficher les paquets install√©s"
        echo "11. Nettoyer les paquets inutilis√©s"
        echo "12. Restaurer la liste des paquets √† partir d'une sauvegarde"
        echo "13. Cr√©er un r√©pertoire de travail"
        echo "14. Consulter la documentation pour l'installation"
        echo "15. V√©rifier l'√©tat d'un paquet"
        echo "16. Expliquer une fonctionnalit√©"
        echo "17. Ex√©cuter un script d'installation personnalis√©"
        echo "18. Afficher l'historique des installations"
        echo "19. Mettre √† jour le bot"
        echo "20. Sauvegarder la configuration d'un paquet"
        echo "21. Restaurer la configuration d'un paquet"
        echo "22. Afficher le journal d'activit√©"
        echo "23. Changer la langue"
        echo "24. Afficher tous les paquets installables"
        echo "25. V√©rifier les mises √† jour de s√©curit√©"
        echo "26. Quitter"
    else
        echo "1. Install a package"
        echo "2. Update packages"
        echo "3. Uninstall a package"
        echo "4. Search for a package"
        echo "5. Show package information"
        echo "6. Reinstall a package"
        echo "7. Help"
        echo "8. Save installed packages list"
        echo "9. Update package list"
        echo "10. Show installed packages"
        echo "11. Clean unused packages"
        echo "12. Restore packages from a backup"
        echo "13. Create a working directory"
        echo "14. Check installation documentation"
        echo "15. Check package status"
        echo "16. Explain a feature"
        echo "17. Run a custom installation script"
        echo "18. Show installation history"
        echo "19. Update the bot"
        echo "20. Save package configuration"
        echo "21. Restore package configuration"
        echo "22. Show activity log"
        echo "23. Change language"
        echo "24. Show all installable packages"
        echo "25. Check security updates"
        echo "26. Quit"
    fi
}

# Fonction pour afficher un message d'aide
show_help() {
    if [ "$LANGUAGE" == "fr" ]; then
        echo "Aide :"
        echo "1. Installer un paquet : Installe un ou plusieurs paquets disponibles."
        echo "2. Mettre √† jour les paquets : Met √† jour tous les paquets install√©s pour avoir les derni√®res versions."
        echo "3. D√©sinstaller un paquet : Supprime un paquet install√© de votre syst√®me."
        echo "4. Rechercher un paquet : Affiche les paquets disponibles correspondant √† votre recherche."
        echo "5. Afficher les informations sur un paquet : Donne des d√©tails sur un paquet sp√©cifique."
        echo "6. R√©installer un paquet : R√©installe un paquet d√©j√† install√©."
        echo "7. Cr√©er un r√©pertoire de travail : Cr√©e un r√©pertoire pour g√©rer vos installations et fichiers de log."
        echo "8. Afficher les paquets install√©s : Montre la liste des paquets install√©s sur votre syst√®me."
        echo "9. Nettoyer les paquets inutilis√©s : Supprime les paquets qui ne sont plus n√©cessaires."
        echo "10. Restaurer la liste des paquets : Restaure les paquets √† partir d'un fichier de sauvegarde."
    else
        echo "Help:"
        echo "1. Install a package: Installs one or more available packages."
        echo "2. Update packages: Updates all installed packages to their latest versions."
        echo "3. Uninstall a package: Removes an installed package from your system."
        echo "4. Search for a package: Displays available packages matching your search."
        echo "5. Show package information: Provides details about a specific package."
        echo "6. Reinstall a package: Reinstalls an already installed package."
        echo "7. Create a working directory: Creates a directory to manage your installations and log files."
        echo "8. Show installed packages: Displays the list of installed packages on your system."
        echo "9. Clean unused packages: Removes packages that are no longer needed."
        echo "10. Restore packages: Restores packages from a backup file."
    fi
}

# Fonction pour v√©rifier les mises √† jour et envoyer des notifications
check_for_updates() {
    echo -e "${YELLOW}V√©rification des mises √† jour disponibles...${NC}"
    if pkg update; then
        echo -e "${GREEN}Mise √† jour r√©ussie.${NC}"
        termux-notification --title "Mise √† jour" --content "Les paquets ont √©t√© mis √† jour avec succ√®s." --priority high
    else
        echo -e "${RED}Erreur lors de la mise √† jour des paquets.${NC}"
    fi
}

# Fonction pour v√©rifier les mises √† jour de s√©curit√©
check_security_updates() {
    echo -e "${YELLOW}V√©rification des mises √† jour de s√©curit√©...${NC}"
    if apt-get upgrade --just-print | grep -q "security"; then
        echo -e "${GREEN}Des mises √† jour de s√©curit√© sont disponibles.${NC}"
        termux-notification --title "Mises √† jour de s√©curit√©" --content "Des mises √† jour de s√©curit√© sont disponibles." --priority high
    else
        echo -e "${GREEN}Aucune mise √† jour de s√©curit√© disponible.${NC}"
    fi
}

# Fonction pour sugg√©rer des paquets populaires
suggest_packages() {
    echo -e "${YELLOW}Suggestions de paquets populaires :${NC}"
    echo "1. git"
    echo "2. python"
    echo "3. nodejs"
    echo "4. vim"
    echo "5. htop"
}

# Fonction pour afficher tous les paquets installables
display_all_packages() {
    echo -e "${YELLOW}Liste de tous les paquets installables :${NC}"
    pkg list-all
}

# Fonction pour sauvegarder la configuration d'un paquet
save_package_configuration() {
    read -p "Entrez le nom du paquet dont vous souhaitez sauvegarder la configuration : " package
    cp -r ~/.config/"$package" ~/backup_config_"$package"
    echo "Configuration de $package sauvegard√©e dans ~/backup_config_$package."
    log_activity "Configuration de $package sauvegard√©e."
}

# Fonction pour restaurer la configuration d'un paquet
restore_package_configuration() {
    read -p "Entrez le nom du paquet dont vous souhaitez restaurer la configuration : " package
    cp -r ~/backup_config_"$package" ~/.config/
    echo "Configuration de $package restaur√©e."
    log_activity "Configuration de $package restaur√©e."
}

# Fonction pour ex√©cuter un script d'installation personnalis√©
run_custom_script() {
    read -p "Entrez le chemin du fichier de script √† ex√©cuter : " script_file
    if [ -f "$script_file" ]; then
        bash "$script_file"
    else
        echo "Fichier de script introuvable."
    fi
}

# Fonction pour afficher l'historique des modifications
display_modification_history() {
    echo "Historique des modifications :"
    cat "$ACTIVITY_LOG"
}

echo -e "${BLUE}============================================${NC}"
echo -e "${GREEN}Bienvenue dans votre assistant d'installation${NC}"
echo -e "${GREEN}de paquets sur Termux! üöÄ${NC}"
echo -e "${BLUE}============================================${NC}"

# Changer la langue si n√©cessaire
change_language

while true; do
    display_main_menu
    read -p "Choisissez une option : " option

    case $option in
        1)
            read -p "Entrez les noms des paquets √† installer (s√©par√©s par des espaces) : " packages
            check_disk_space
            for package in $packages; do
                read -p "√ätes-vous s√ªr de vouloir installer $package ? (y/n) " confirm
                if [ "$confirm" == "y" ]; then
                    echo -e "${YELLOW}Installation de $package...${NC}"
                    if pkg install "$package" -y; then
                        echo "$package a √©t√© install√© avec succ√®s."
                        echo "$(date): Installation de $package" >> "$LOGFILE"
                        log_activity "Installation r√©ussie de $package."
                        termux-notification --title "Installation r√©ussie" --content "$package a √©t√© install√© avec succ√®s." --priority high
                        suggest_packages  # Sugg√©rer des paquets apr√®s installation
                    else
                        echo "Erreur lors de l'installation de $package." | tee -a error_log.txt
                        log_activity "Erreur lors de l'installation de $package."
                        termux-notification --title "Erreur d'installation" --content "Erreur lors de l'installation de $package." --priority high
                        read -p "Voulez-vous essayer de r√©installer $package ? (y/n) " retry
                        if [ "$retry" == "y" ]; then
                            pkg install "$package" -y
                        fi
                    fi
                else
                    echo "Installation de $package annul√©e."
                fi
            done
            ;;
        2)
            check_for_updates  # V√©rifier les mises √† jour
            ;;
        3)
            read -p "Entrez le nom du paquet √† d√©sinstaller : " package
            if pkg uninstall "$package" -y; then
                echo "$package a √©t√© d√©sinstall√© avec succ√®s."
                echo "$(date): D√©sinstallation de $package" >> "$LOGFILE"
                log_activity "D√©sinstallation r√©ussie de $package."
                termux-notification --title "D√©sinstallation r√©ussie" --content "$package a √©t√© d√©sinstall√© avec succ√®s." --priority high
            else
                echo "Erreur lors de la d√©sinstallation de $package." | tee -a error_log.txt
                log_activity "Erreur lors de la d√©sinstallation de $package."
                termux-notification --title "Erreur de d√©sinstallation" --content "Erreur lors de la d√©sinstallation de $package." --priority high
            fi
            ;;
        4)
            read -p "Entrez le nom du paquet √† rechercher : " search_term
            pkg search "$search_term"
            ;;
        5)
            read -p "Entrez le nom du paquet pour voir les informations : " package
            pkg show "$package"
            ;;
        6)
            read -p "Entrez le nom du paquet √† r√©installer : " package
            if pkg reinstall "$package" -y; then
                echo "$package a √©t√© r√©install√© avec succ√®s."
                echo "$(date): R√©installation de $package" >> "$LOGFILE"
                log_activity "R√©installation r√©ussie de $package."
            else
                echo "Erreur lors de la r√©installation de $package." | tee -a error_log.txt
                log_activity "Erreur lors de la r√©installation de $package."
            fi
            ;;
        7)
            show_help
            ;;
        8)
            echo "Sauvegarde de la liste des paquets install√©s..."
            dpkg --get-selections > ~/installed_packages.txt
            echo "Liste des paquets sauvegard√©e dans ~/installed_packages.txt"
            log_activity "Liste des paquets install√©s sauvegard√©e."
            ;;
        9)
            echo "Mise √† jour de la liste des paquets..."
            pkg update
            echo "Liste des paquets mise √† jour."
            log_activity "Liste des paquets mise √† jour."
            ;;
        10)
            echo "Paquets install√©s :"
            dpkg --get-selections | grep -v deinstall
            ;;
        11)
            echo "Nettoyage des paquets inutilis√©s..."
            pkg autoremove -y
            log_activity "Nettoyage des paquets inutilis√©s effectu√©."
            ;;
        12)
            read -p "Entrez le chemin du fichier de sauvegarde : " backup_file
            xargs -a "$backup_file" pkg install -y
            echo "Restoration compl√®te."
            log_activity "Restoration des paquets √† partir du fichier de sauvegarde."
            ;;
        13)
            read -p "Entrez le chemin du r√©pertoire √† cr√©er : " dir_path
            mkdir -p "$dir_path"
            echo "R√©pertoire $dir_path cr√©√© avec succ√®s."
            cd "$dir_path" || { echo "Erreur : Impossible de changer de r√©pertoire."; exit 1; }
            touch error_log.txt install_log.txt
            echo "Fichiers de log cr√©√©s : error_log.txt et install_log.txt."
            log_activity "R√©pertoire de travail cr√©√© √† $dir_path."
            ;;
        14)
            echo "Consulter les documents d'aide pour l'installation :"
            echo "1. Documentation officielle de Termux : https://wiki.termux.com/wiki/Main_Page"
            echo "2. Forum de la communaut√© Termux : https://termux.com/community"
            echo "3. Stack Overflow : https://stackoverflow.com/questions/tagged/termux"
            echo "4. GitHub de Termux : https://github.com/termux/termux-packages"
            echo "5. Recherche Google : https://www.google.com/search?q=termux+installation+issues"
            read -p "Souhaitez-vous ouvrir l'une de ces ressources dans un navigateur ? (y/n) " open_browser
            if [ "$open_browser" == "y" ]; then
                termux-open-url "https://wiki.termux.com/wiki/Main_Page"
            fi
            ;;
        15)
            read -p "Entrez le nom du paquet √† v√©rifier : " package
            if dpkg -l | grep -q "^ii  $package"; then
                echo "$package est install√©."
            else
                echo "$package n'est pas install√©."
            fi
            ;;
        16)
            echo "Choisissez une fonctionnalit√© √† expliquer :"
            echo "1. Installer un paquet"
            echo "2. Mettre √† jour les paquets"
            echo "3. D√©sinstaller un paquet"
            echo "4. Rechercher un paquet"
            echo "5. Afficher les informations sur un paquet"
            echo "6. R√©installer un paquet"
            echo "7. Aide"
            echo "8. Sauvegarder la liste des paquets install√©s"
            echo "9. Mettre √† jour la liste des paquets"
            echo "10. Afficher les paquets install√©s"
            echo "11. Nettoyer les paquets inutilis√©s"
            echo "12. Restaurer la liste des paquets √† partir d'une sauvegarde"
            echo "13. Cr√©er un r√©pertoire de travail"
            echo "14. Consulter la documentation"
            read -p "Entrez le num√©ro de la fonctionnalit√© : " feature_number

            case $feature_number in
                1)
                    echo "Installer un paquet : Cette fonctionnalit√© vous permet d'installer des paquets logiciels disponibles dans les d√©p√¥ts de Termux. Vous pouvez installer un ou plusieurs paquets √† la fois en utilisant leurs noms."
                    ;;
                2)
                    echo "Mettre √† jour les paquets : Cela permet de mettre √† jour tous les paquets install√©s sur votre syst√®me √† leurs derni√®res versions stables. C'est une bonne pratique de maintenir votre syst√®me √† jour."
                    ;;
                3)
                    echo "D√©sinstaller un paquet : Cette option supprime un paquet install√© de votre syst√®me. Cela peut √™tre utile pour lib√©rer de l'espace ou si vous n'avez plus besoin d'un logiciel."
                    ;;
                4)
                    echo "Rechercher un paquet : Cette fonctionnalit√© vous permet de rechercher des paquets disponibles dans les d√©p√¥ts en fonction de votre requ√™te. Cela vous aide √† trouver des logiciels sp√©cifiques."
                    ;;
                5)
                    echo "Afficher les informations sur un paquet : Cela vous donne des d√©tails sur un paquet sp√©cifique, y compris sa version, sa description et d'autres informations pertinentes."
                    ;;
                6)
                    echo "R√©installer un paquet : Cela permet de r√©installer un paquet d√©j√† install√©, ce qui peut √™tre utile si vous rencontrez des probl√®mes avec un paquet existant."
                    ;;
                7)
                    echo "Aide : Cette option fournit des informations d√©taill√©es sur l'utilisation du bot et des fonctionnalit√©s disponibles."
                    ;;
                8)
                    echo "Sauvegarder la liste des paquets install√©s : Cela enregistre la liste des paquets install√©s sur votre syst√®me dans un fichier pour r√©f√©rence future."
                    ;;
                9)
                    echo "Mettre √† jour la liste des paquets : Cette fonctionnalit√© met √† jour la liste des paquets disponibles √† partir des d√©p√¥ts, ce qui vous permet d'acc√©der aux derni√®res versions."
                    ;;
                10)
                    echo "Afficher les paquets install√©s : Cela montre la liste des paquets actuellement install√©s sur votre syst√®me."
                    ;;
                11)
                    echo "Nettoyer les paquets inutilis√©s : Cela supprime les paquets qui ne sont plus n√©cessaires et lib√®re de l'espace."
                    ;;
                12)
                    echo "Restaurer la liste des paquets : Cela vous permet de restaurer les paquets √† partir d'un fichier de sauvegarde, ce qui est utile pour r√©cup√©rer des installations pr√©c√©dentes."
                    ;;
                13)
                    echo "Cr√©er un r√©pertoire de travail : Cela cr√©e un r√©pertoire o√π vous pouvez g√©rer vos installations et fichiers de log."
                    ;;
                14)
                    echo "Consulter la documentation : Cela vous permet d'acc√©der √† des ressources en ligne pour r√©soudre les probl√®mes d'installation."
                    ;;
                *)
                    echo "Num√©ro de fonctionnalit√© invalide."
                    ;;
            esac
            ;;
        17)
            run_custom_script  # Ex√©cuter un script d'installation personnalis√©
            ;;
        18)
            display_modification_history  # Afficher l'historique des modifications
            ;;
        19)
            echo "T√©l√©chargement de la derni√®re version du bot..."
            wget -O ~/install_bot.sh https://example.com/path/to/your/script.sh
            chmod +x ~/install_bot.sh
            echo "Mise √† jour termin√©e. Vous pouvez ex√©cuter le bot avec ~/install_bot.sh."
            ;;
        20)
            save_package_configuration  # Sauvegarder la configuration d'un paquet
            ;;
        21)
            restore_package_configuration  # Restaurer la configuration d'un paquet
            ;;
        22)
            echo "Journal d'activit√© :"
            cat "$ACTIVITY_LOG"
            ;;
        23)
            change_language
            ;;
        24)
            display_all_packages  # Afficher tous les paquets installables
            ;;
        25)
            check_security_updates  # V√©rifier les mises √† jour de s√©curit√©
            ;;
        26)
            echo -e "${YELLOW}Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Option invalide. Veuillez r√©essayer.${NC}"
            ;;
    esac
done



